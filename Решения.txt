Тестовое задание набора (04.10.2021) MERN

=== Linux навигация и поиск ===

Файловая структура

/
--/var/
----/www/
------/html/
--------/index.html
--------/404.html
--------/logs
----------/error.txt
----------/access.txt
--------/images
----------/icon.png
----------/cat.jpg
----------/dog.jpg
--------/.htaccess


Задание

Напишите набор команд с комментарием их работы которые вы примените для решения следующих задач:

1.	Выведите список идентификаторов процессов содержащих в названии sh

  ps -e | grep sh   // выводим все идентификаторов процессов, в которые содержат sh

  ps — (process state — состояние процессов) команда для отображения списка запущенных процессов в Linux
  -e — флаг, отображение всех процессов
  grep — утилита командной строки, которая находит на вводе строки, отвечающие заданному регулярному выражению, и выводит их

2. Объедините все файлы *.txt в один /all.txt

  cd /var/www/html/ // переходим в папку, где хотим создать файл all.txt
Вариант 1:
  find /var/www/html/ -name *txt -print0 | -xargs -0 -I file cat file > all.txt

Вариант 2:
  touch all.txt
    find /var/www/html/ -name *txt | -xargs cat >> all.txt

  find - команда, предназначенная для поиска файлов и каталогов на основе специальных условий,
  -name *txt - флаг, поиск файла по имени
  touch - команда, предназначенная для установки времени последнего изменения файла или доступа в текущее время. Также используется для создания пустых файлов,
  cat - команда, читает данные из файла или стандартного ввода,
  >> all.txt - пишем прочитанное в файл

3. Выведите список имен (без пути и расширения) файлов с расширением .jpg в папке images

!!!Поскольку мне не удалось получить  список имен файлов без пути и расширения
ни командой find ни ls -A -1 | grep .jpg, то написал php скрипт:
  
  <?php
      $dir = '/var/www/html/images/';
      // Получаем список файлов и каталогов, расположенных по указанному пути
      $files = scandir($dir);

      for($i = 0; $i < count($files); $i++) {
          // Если не родительская директория . или .., то и
          if($files[$i] !== "." || $files[$i] !== ".." ) {
              // При помощи функции pathinfo() получим в массив информацию о пути файла
              $path_parts = pathinfo($files[$i]);
          
              if($path_parts['extension'] === "jpg") {
                  // Выводим имя файла без пути и расширения
                echo $path_parts['filename'] . "\n";
              }
          }
      }
  ?>

// Для запуска скрипта установим php интерпретатор для выполнения скрипта
  sudo apt install php7.4-cli

4. Напишите bash скрипт который переименует все файлы в папке logs с .txt на <md5 hash> и создайте файл dict в который сохраните связь старого и нового имен.
P.S: <md5 hash> -- это md5 хеш названия файла.

!!! Поскольку у меня нет навыков работы с BASH, то выполню данное задание с применением PHP скрипта (результат будет тот же)
  
  // Установим php интерпретатор для выполнения скрипта
  sudo apt install php7.4-cli

  // Содержимое файла script.php:
  <?php
    $dir = '/var/www/html/logs/';
    // Получаем список файлов и каталогов, расположенных по указанному пути
    $files = scandir($dir);

    // Открываем файл для записи ( параметр "а" - будем досаписывать в конец файла)
    $fp = fopen($dir . "dict.txt", "a");
    
      for($i = 0; $i < count($files); $i++) {
          // Если не родительская директория . или .., то и
          if($files[$i] !== "." || $files[$i] !== "..") {
              // При помощи функции pathinfo() получим в массив информацию о пути файла
              $path_parts = pathinfo($files[$i]);
          
              if($path_parts['extension'] === "txt") {
                  // Если не файл dict.txt в котором храним связи старое имя => новое имя, то
                  if($path_parts['filename'] !== "dict") {
                      // Переменная для хранения старого имени файла
                      $old_file_name = $path_parts['basename'];
                      // Переменная для хранения нового имени файла
                      $new_file_name = md5($path_parts['filename']) . "." . $path_parts['extension'];
                      // Строка для хранения связи старого и нового имен файлов
                      // формат сохранения (access.txt => 9df3b01c60df20d13843841ff0d4482c.txt)
                      $text = $old_file_name . ' => ' . $new_file_name ."\n";  
                      // Записываем данные в открытый файл
                      fwrite($fp,  $text);
                      // Переименовываем файл
                      rename($dir . $old_file_name, $dir . $new_file_name);
                  }
              }
          }
      }

    // Закрываем файл, чтоб освободить его 
    fclose($fp);
  ?>

  // Перейдем в папку, где находится php-скрипт
  cd /var/www/html/

  // Запустим скрипт
  php script.php


5. Модифицируйте права доступа и владельца папки images следующим образом: Пользователь 1200 и группа www-data имеют чтение/запись на всю директорию и на файлы внутри директории остальные не имеют доступа к папке и файлам и исполнения файлов.

  sudo chown -R '1200':'www-data' /var/www/html/images/  // назначаем владельцем папки images пользователя 1200 и группу www-data

  sudo chmod 660 /var/www/html/images/    // назначаем права достапа (владелец(4 + 2)/группа(4 + 2)/другие пользователи 0) для владельца и группы - чтение и запись, для остальных нет доступа


6. Перезапишите файл access.txt его же текущим содержимым.

  !!!Поскольку и команда cp и cat с разными вариациями ругались что происходит копирование в тот же файл
  я написал PHP скрипт который перезаписывает файл:

  <?php
    $filename = "/var/www/html/logs/access.txt";
    // Открываем файл для чтения
    $handle = fopen($filename, "r");
    // Получаем содержимое файла в строку
    $contents = fread($handle, filesize($filename));
    // Закрываем файл
    fclose($handle);
    // Открываем файл для записи
    $handle = fopen($filename, "w");
    // Записываем данные в файл
    fwrite($handle,  $contents);
    // Закрываем файл
    fclose($handle);
    echo "\nФайл перезаписан\n";
?>

// Для запуска скрипта установим php интерпретатор для выполнения скрипта
  sudo apt install php7.4-cli

7. Выведите список файлов в папке images размер которых более 3 мегабайт и строкой в имени "cat"

  find /var/www/html/images/ -size +3M | grep cat

  find - команда, предназначенная для поиска файлов и каталогов на основе специальных условий,
  -size - флаг, поиск по размеру файла
  grep — утилита командной строки, которая находит на вводе строки, отвечающие заданному регулярному выражению, и выводит их.




=== GIT внесение изменений ===

Рабочее окружение
Вы уже работаете на ветке task_4 родительская ветка которой dev.

Задание
На ветке dev удаленного репозитория появились новые изменения и ваша задача добавить их в свою ветку перед своими,
опишите порядок ваших действий.


=== JS логика ===

Задание
1. Напишите функцию nodeChildCount которая получает на вход объект типа Node и возвращает число всех вложенных нодов,
аргумент deep указывать глубину подсчета если не указан то бесконечно.
Пример:
const div = document.createElement('div')
const p = document.createElement('p')
const span = document.createElement('span')
p.appendChild(span)
div.appendChild(p)

nodeChildCount(div) // 2
nodeChildCount(div, 1) // 1
nodeChildCount(div, 2) // 2

2. Напишите функцию генератор chunkArray которая возвращает итератор возвращающий части массива указанной длинны. 
Пример:
const iterator = chunkArray([1,2,3,4,5,6,7,8], 3);
iterator.next() // { value: [1,2,3], done: false }
iterator.next() // { value: [4,5,6], done: false }
iterator.next() // { value: [7,8], done: false }
iterator.next() // { value: undefined, done: true }

3. Напишите функцию обертку которая на вход принимает массив функций и их параметров, а возвращает массив результатов их выполнения. 
!!!ВНИМАНИЕ!!! Количество аргументов исполняемой функции не ограничено!
Пример:
const f1 = (cb) => {cb(1)}
const f2 = (a, cb) => {cb(a)}
const f3 = (a, b, cb) => {setTimeout(() => cb([a, b]), 1000)}

bulkRun(
  [
    [f1, []],
    [f2, [2]]
    [f3, [3, 4]]
  ]
).then(console.log)
 // Output: [1, 2, [3, 4]]

4. Сделать функцию mapper которая на вход принимает набор правил для преобразования данных.
Формат правила:
[<поле которое преобразовуем>, <новое название поля>[, <функция для преобразования значения>]]
Пример:
let testData3 = [{"name":"Vasya","email":"vasya@example.com","age":20,"skills":{"php":0,"js":-1,"madness":10,"rage":10}},{"name":"Dima","email":"dima@example.com","age":34,"skills":{"php":5,"js":7,"madness":3,"rage":2}},{"name":"Colya","email":"colya@example.com","age":46,"skills":{"php":8,"js":-2,"madness":1,"rage":4}},{"name":"Misha","email":"misha@example.com","age":16,"skills":{"php":6,"js":6,"madness":5,"rage":2}},{"name":"Ashan","email":"ashan@example.com","age":99,"skills":{"php":0,"js":10,"madness":10,"rage":1}},{"name":"Rafshan","email":"rafshan@example.com","age":11,"skills":{"php":0,"js":0,"madness":0,"rage":10}}]

const mapRules = [
  ["name", "n", (value) => value.toLowerCase()],
  ["age", "a"]
]

testData3.map(mapper(mapRules)) // [{"n":"vasya","a":20},{"n":"dima","a":34},{"n":"colya","a":46},{"n":"misha","a":16},{"n":"ashan","a":99},{"n":"rafshan","a":11}]


5. Есть функция primitiveMultiply, которая умножает числа, но случайным образом может выбрасывать исключения типа: NotificationException, ErrorException. Задача написать функцию обертку которая будет повторять вычисление при исключении NotificationException, но прекращать работу при исключениях ErrorException
Пример:
function NotificationException() {}
function ErrorException() {}
function primitiveMultiply(a, b) {
  const rand = Math.random();
  if (rand < 0.5) {
    return a * b;
  } else if(rand > 0.85) {
    throw new ErrorException()
  } else {
    throw new NotificationException()
  }
}

function reliableMultiply(a, b) {
  // Ваш код
}
console.log(reliableMultiply(8, 8));

6. Дана матрица (двумерный массив), нужно написать функцию, которая будет находить наименьшее значение, 
  после чего все нечетные значения в матрице будет умножать на это число.

Исходная матрица:
[
 [5, 3, 6], 
 [7, 11, 2],
 [15, 9, 4]
]

Результат выполнения функции:
[
 [10, 6, 6],
 [14, 22, 2],
 [30, 18, 4]
]
